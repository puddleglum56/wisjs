{"version":3,"sources":["hooks.tsx","searchApi.tsx","map/MapSlice.tsx","map/Pin.tsx","map/Map.tsx","search_bar/SearchBarSlice.tsx","search_bar/SearchBar.tsx","advanced_options_menu/AdvancedOptionsMenuSlice.tsx","advanced_options_menu/AdvancedOptionsMenu.tsx","search_panel/SearchPanel.tsx","App.tsx","reportWebVitals.ts","keysApi.tsx","store.tsx","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","seasonalJobsSearchApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","getSeasonalJobs","query","args","url","version","method","body","search","searchType","join","hours","requiredExperience","includeAgricultural","includeNonagricultural","mapBounds","nw","lng","lat","sw","se","ne","useGetSeasonalJobsQuery","mapSlice","createSlice","name","initialState","bounds","reducers","setMapBounds","state","action","payload","actions","LightTooltip","styled","className","props","Tooltip","classes","popper","theme","tooltipClasses","arrow","color","palette","common","white","tooltip","backgroundColor","boxShadow","shadows","fontSize","Pin","placement","title","Stack","direction","Typography","variant","job","job_title","basic_rate_from","basic_rate_to","Date","begin_date","toLocaleDateString","end_date","hourly_work_schedule_am","hourly_work_schedule_pm","Button","sx","marginTop","marginBottom","marginRight","maxWidth","transform","height","$hover","width","Map","mapProps","dispatch","searchQueryArgs","searchBar","advancedOptions","agricultural","nonagricultural","map","searchQuery","skipToken","bootstrapURLKeys","key","defaultCenter","center","defaultZoom","onChange","event","data","value","flatMap","coord","coordinates","case_id","searchBarSlice","setSearchType","setSearch","SearchBar","textFieldRef","useRef","FormControl","minWidth","InputLabel","Select","multiple","label","size","target","MenuItem","TextField","current","onClick","marginLeft","advancedOptionsSlice","toggleAgricultural","toggleNonagricultural","setRequiredExperience","setHours","BasicMenu","React","anchorEl","setAnchorEl","open","Boolean","id","undefined","currentTarget","Menu","onClose","MenuListProps","FormGroup","display","FormControlLabel","control","Checkbox","checked","Slider","onChangeCommitted","_","defaultValue","max","valueLabelDisplay","SearchPanel","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","keysApi","getKeys","store","useGetKeysQuery","configureStore","reducer","searchBarReducer","advancedOptionsReducer","mapReducer","middleware","getDefaultMiddleware","concat","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e5cac7e4.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from './store'\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\nimport { MapBounds } from './map/MapSlice'\r\nimport { Job, SeasonalJobSearchResponse } from './types/Job'\r\n\r\nexport type SearchQueryArgs = {\r\n  version: string,\r\n  search: string,\r\n  searchType: string[],\r\n  includeAgricultural: boolean,\r\n  includeNonagricultural: boolean,\r\n  requiredExperience: number,\r\n  hours: number,\r\n  mapBounds: MapBounds\r\n}\r\n\r\nexport const seasonalJobsSearchApi = createApi({\r\n  reducerPath: 'seasonalJobsSearchApi',\r\n  baseQuery: fetchBaseQuery({ \r\n    baseUrl: 'https://morning-tor-41184.herokuapp.com/https://seasonaljobs.dol.gov/datahub/search',\r\n  }),\r\n  endpoints: (builder) => ({\r\n    getSeasonalJobs: builder.query<SeasonalJobSearchResponse, SearchQueryArgs>({\r\n      query: (args: SearchQueryArgs) =>  ({\r\n        url: `?api-version=${args.version}`,\r\n        method: 'POST',\r\n        body: {\r\n          'search': `/.*${args.search}~.*/`,\r\n          'searchFields': args.searchType.join(', '),\r\n          'top': 100,\r\n          'skip': 0,\r\n          'queryType': 'simple',\r\n          'searchMode': 'any',\r\n          'count': true,\r\n          'filter': (\r\n            `active eq true and display eq true and work_hour_num_basic le ${args.hours} and emp_exp_num_months le ${args.requiredExperience} ${!args.includeAgricultural ? \"and visa_class eq 'H-2B'\" : ''}${(!args.includeNonagricultural) ? \"and visa_class eq 'H-2A'\" : ''} and geo.intersects(coord, geography'POLYGON((${args.mapBounds.nw.lng} ${args.mapBounds.nw.lat}, ${args.mapBounds.sw.lng} ${args.mapBounds.sw.lat}, ${args.mapBounds.se.lng} ${args.mapBounds.se.lat}, ${args.mapBounds.ne.lng} ${args.mapBounds.ne.lat}, ${args.mapBounds.nw.lng} ${args.mapBounds.nw.lat}))')`),\r\n          'scoringProfile': 'test_profile',\r\n          'facets': ['job_title, count:4, sort:count'],\r\n          'orderby': 'search.score() desc',\r\n        },\r\n      }),\r\n    }),\r\n  }),\r\n})\r\n\r\nexport const { useGetSeasonalJobsQuery } = seasonalJobsSearchApi\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\n\r\ntype GeoPoint = {\r\n  lat: number,\r\n  lng: number\r\n}\r\n\r\nexport type MapBounds = {\r\n    ne: GeoPoint,\r\n    nw: GeoPoint,\r\n    se: GeoPoint,\r\n    sw: GeoPoint\r\n}\r\n\r\n// Define a type for the slice state\r\ninterface MapState{\r\n  bounds: MapBounds,\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: MapState = {\r\n  bounds: {\r\n    ne: {lat: 40.51367862028704, lng: -100.98148879287625},\r\n    nw: {lat: 57.0406435823742, lng: -168.48148879287626},\r\n    se: {lat: 18.64609491842107, lng: -33.48148879287626},\r\n    sw: {lat: 18.64609491842107, lng: -168.48148879287626}\r\n  }\r\n}\r\n\r\nexport const mapSlice = createSlice({\r\n  name: 'map',\r\n  initialState,\r\n  reducers: {\r\n    setMapBounds: (state, action: PayloadAction<MapBounds>) => {\r\n      state.bounds = action.payload\r\n    },\r\n  },\r\n})\r\n\r\nexport const { setMapBounds } = mapSlice.actions; \r\nexport default mapSlice.reducer","import './Pin.css'\r\nimport PlaceIcon from '@mui/icons-material/Place';\r\nimport Tooltip, { tooltipClasses, TooltipProps } from '@mui/material/Tooltip';\r\nimport { Job } from '../types/Job';\r\nimport styled from '@mui/material/styles/styled';\r\nimport { Button, Stack, Typography } from '@mui/material';\r\n\r\ntype PinProps = {\r\n    lat: number,\r\n    lng: number,\r\n    job: Job,\r\n    $hover?: boolean\r\n}\r\n\r\nconst LightTooltip = styled(({ className, ...props }: TooltipProps) => (\r\n  <Tooltip {...props} classes={{ popper: className }} />\r\n))(({ theme }) => ({\r\n  [`& .${tooltipClasses.arrow}`]: {\r\n    color: theme.palette.common.white,\r\n  },\r\n  [`& .${tooltipClasses.tooltip}`]: {\r\n    backgroundColor: theme.palette.common.white,\r\n    color: 'rgba(0, 0, 0, 0.87)',\r\n    boxShadow: theme.shadows[1],\r\n    fontSize: 11,\r\n  },\r\n}));\r\n\r\nexport default function Pin(props: PinProps) {\r\n\r\n  return (\r\n    <LightTooltip placement=\"right-start\" arrow title={\r\n      <Stack direction=\"column\">\r\n        <Typography variant=\"h6\">{props.job.job_title}</Typography>\r\n        <Typography variant=\"subtitle2\">Pay:</Typography>\r\n        <Typography>${props.job.basic_rate_from}-${props.job.basic_rate_to}</Typography>\r\n        <Typography variant=\"subtitle2\">Dates:</Typography>\r\n        <Typography>{new Date(props.job.begin_date).toLocaleDateString()} - {new Date(props.job.end_date).toLocaleDateString()}</Typography>\r\n        <Typography variant=\"subtitle2\">Hours:</Typography>\r\n        <Typography>{props.job.hourly_work_schedule_am} - {props.job.hourly_work_schedule_pm}</Typography>\r\n        <Button variant=\"contained\" sx={{marginTop: \"1vh\", marginBottom: \"1vh\", marginRight: \"50%\", maxWidth: \"30%\"}}>Apply</Button>\r\n      </Stack>\r\n      }>\r\n      <PlaceIcon sx={{color: \"#1565C0\", transform: \"translate(-50%, -50%)\", height: props.$hover ? \"1.5em\" : \"1em\", width: props.$hover ? \"1.5em\" : \"1em\"}} />\r\n    </LightTooltip>\r\n  );\r\n}","import { skipToken } from '@reduxjs/toolkit/dist/query';\nimport GoogleMapReact from 'google-map-react'\nimport { useAppDispatch, useAppSelector } from '../hooks';\nimport { SearchQueryArgs, useGetSeasonalJobsQuery } from '../searchApi';\nimport { Job } from '../types/Job';\nimport './Map.css'\nimport { setMapBounds } from './MapSlice';\nimport Pin from './Pin';\n\ntype Location = {\n  lat: number,\n  lng: number\n}\n\ntype MapProps = {\n  center: Location,\n  defaultZoom: number\n}\n\n\nexport default function Map(mapProps: MapProps) {\n  const dispatch = useAppDispatch()\n\n  const searchQueryArgs : SearchQueryArgs = {\n    search : useAppSelector((state) => state.searchBar.search),\n    version : '2020-06-30',\n    searchType : useAppSelector((state) => state.searchBar.searchType),\n    requiredExperience : useAppSelector((state) => state.advancedOptions.requiredExperience),\n    includeAgricultural : useAppSelector((state) => state.advancedOptions.agricultural),\n    includeNonagricultural : useAppSelector((state) => state.advancedOptions.nonagricultural),\n    hours : useAppSelector((state) => state.advancedOptions.hours),\n    mapBounds : useAppSelector((state) => state.map.bounds)\n  }\n\n  // TODO: Now we gotta get the data out of the store and load it into the map :)\n  const searchQuery = useGetSeasonalJobsQuery(searchQueryArgs.search ? searchQueryArgs : skipToken);\n\n  return (\n    <div className=\"map\">\n        <div className=\"google-map\">\n          <GoogleMapReact\n            bootstrapURLKeys={{ key: 'AIzaSyA-3X7TKl4j6TA0jrbvrDhTg4MiqUZbs7w'}}\n            //bootstrapURLKeys={{ key: keyQuery.data.googleMapsAPI}}\n            defaultCenter={mapProps.center}\n            defaultZoom={mapProps.defaultZoom}\n            onChange={(event: GoogleMapReact.ChangeEventValue) => dispatch(setMapBounds(event.bounds))}>\n            {searchQuery.data ? (\n              searchQuery.data.value.flatMap((job : Job) => job.coord ?\n                [<Pin key={job.case_id} lat={job.coord.coordinates[1]} lng={job.coord.coordinates[0]} job={job} />] : \n                []\n              )\n            ) : null }\n          </GoogleMapReact>\n        </div>\n    </div>\n  );\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\n\r\n// Define a type for the slice state\r\ninterface SearchBarState{\r\n  searchType: string[];\r\n  search: string;\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: SearchBarState = {\r\n  searchType: ['job_title'],\r\n  search: '',\r\n}\r\n\r\nexport const searchBarSlice = createSlice({\r\n  name: 'searchType',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    setSearchType: (state, action: PayloadAction<string[]>) => {\r\n      state.searchType = action.payload\r\n    },\r\n    setSearch: (state, action: PayloadAction<string>) => {\r\n      state.search = action.payload\r\n    },\r\n  },\r\n})\r\n\r\nexport const { setSearchType, setSearch } = searchBarSlice.actions; \r\nexport default searchBarSlice.reducer","import './SearchBar.css';\nimport { Button, FormControl, InputLabel, MenuItem, Select, TextField } from '@mui/material';\nimport { useAppSelector, useAppDispatch } from '../hooks'\nimport { setSearchType, setSearch } from './SearchBarSlice'\nimport { SelectChangeEvent } from '@mui/material/Select';\nimport { useRef } from 'react';\n\nfunction SearchBar() {\n  const dispatch = useAppDispatch()\n  const textFieldRef = useRef('')\n  const searchType = useAppSelector((state) => state.searchBar.searchType)\n\n  return (\n  <>\n  <FormControl className=\"search-select\" sx={{minWidth: \"30%\", maxWidth: \"30%\"}}>\n      <InputLabel>Search type</InputLabel>\n      <Select\n      multiple\n      // @ts-ignore: Unreachable code error\n      value={searchType}\n      label=\"Search type\"\n      size=\"small\"\n      // @ts-ignore: Unreachable code error\n      onChange={(event: SelectChangeEvent) => dispatch(setSearchType(event.target.value))}\n      >\n        <MenuItem value=\"job_title\">Job Title</MenuItem>\n        <MenuItem value=\"soc_title\">Standard Occupational Classification Title</MenuItem>\n        <MenuItem value=\"employer_business_name\">Employer Business Name</MenuItem>\n        <MenuItem value=\"employer_trade_name\">Employer Trade Name</MenuItem>\n        <MenuItem value=\"job_duties\">Job Duties</MenuItem>\n        <MenuItem value=\"soc_code_id\">Job ID</MenuItem>\n        <MenuItem value=\"case_number\">Case Number</MenuItem>\n      </Select>\n    </FormControl>\n    <TextField onChange={(event) => textFieldRef.current = event.target.value } variant=\"outlined\" size=\"small\" className=\"search-input\" sx={{backgroundColor: \"white\", minWidth: \"40%\"}}/>\n    <Button onClick={() => dispatch(setSearch(textFieldRef.current))} variant=\"contained\" className=\"search-button\" sx={{marginLeft: \"1vw\", maxWidth: \"5%\"}}>Search</Button>\n  </>\n  );\n}\n\nexport default SearchBar; \n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\n\r\ninterface AdvancedOptionsState {\r\n  agricultural: boolean;\r\n  nonagricultural: boolean; \r\n  requiredExperience: number;\r\n  hours: number;\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: AdvancedOptionsState = {\r\n  agricultural: true,\r\n  nonagricultural: true, \r\n  requiredExperience: 0,\r\n  hours: 50\r\n}\r\n\r\nexport const advancedOptionsSlice = createSlice({\r\n  name: 'advancedOptions',\r\n  initialState,\r\n  reducers: {\r\n    toggleAgricultural: (state) => {\r\n      state.agricultural = !state.agricultural\r\n    },\r\n    toggleNonagricultural: (state) => { \r\n      state.nonagricultural = !state.nonagricultural\r\n    },\r\n    setRequiredExperience: (state, action: PayloadAction<number>) => {\r\n      state.requiredExperience = action.payload\r\n    },\r\n    setHours: (state, action: PayloadAction<number>) => {\r\n      state.hours = action.payload\r\n    },\r\n  },\r\n})\r\n\r\nexport const { toggleAgricultural, toggleNonagricultural, setRequiredExperience, setHours } = advancedOptionsSlice.actions; \r\nexport default advancedOptionsSlice.reducer","import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport Slider from '@mui/material/Slider';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\nimport { useAppDispatch, useAppSelector } from '../hooks';\nimport { setHours, setRequiredExperience, toggleAgricultural, toggleNonagricultural } from './AdvancedOptionsMenuSlice';\n\nexport default function BasicMenu() {\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const open = Boolean(anchorEl);\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const dispatch = useAppDispatch()\n  const  agricultural : boolean = useAppSelector((state) => state.advancedOptions.agricultural);\n  const  nonagricultural : boolean = useAppSelector((state) => state.advancedOptions.nonagricultural);\n  const  requiredExperience : number = useAppSelector((state) => state.advancedOptions.requiredExperience);\n  const  hours : number = useAppSelector((state) => state.advancedOptions.hours);\n\n  return (\n    <div>\n      <Button\n        sx={{marginLeft: \"15%\", minWidth: \"100%\"}}\n        id=\"basic-button\"\n        aria-controls=\"basic-menu\"\n        aria-haspopup=\"true\"\n        aria-expanded={open ? 'true' : undefined}\n        onClick={handleClick}\n      >\n        Advanced Options\n      </Button>\n      <Menu\n        id=\"basic-menu\"\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleClose}\n        MenuListProps={{\n          'aria-labelledby': 'basic-button',\n        }}\n      >\n        <MenuItem>\n          <FormGroup sx={{display: \"inline\"}}>\n            <FormControlLabel control={<Checkbox onChange={() => dispatch(toggleAgricultural())} checked={agricultural} />} label=\"Agricultural\" />\n            <FormControlLabel control={<Checkbox onChange={() => dispatch(toggleNonagricultural())} checked={nonagricultural} />} label=\"Non-Agricultural\" />\n          </FormGroup>\n        </MenuItem>\n        <MenuItem>\n          <Stack direction=\"column\" sx={{minWidth: \"100%\"}}>\n            <Typography> Months Experience </Typography>\n            <Slider onChangeCommitted={(_, value) => dispatch(setRequiredExperience(value as number))} defaultValue={requiredExperience} max={24} size=\"small\" valueLabelDisplay=\"auto\" aria-label=\"slider-experience-required\" />\n          </Stack>\n        </MenuItem>\n        <MenuItem>\n          <Stack direction=\"column\" sx={{minWidth: \"100%\"}}>\n            <Typography>Hours per Week</Typography>\n            <Slider onChangeCommitted={(_, value) => dispatch(setHours(value as number))} defaultValue={hours} max={50} size=\"small\" valueLabelDisplay=\"auto\" aria-label=\"slider-hours\" />\n          </Stack>\n        </MenuItem>\n      </Menu>\n    </div>\n  );\n}","import './SearchPanel.css';\nimport SearchBar from '../search_bar/SearchBar';\nimport BasicMenu from '../advanced_options_menu/AdvancedOptionsMenu';\n\nfunction SearchPanel() {\n  return (\n    <div className=\"search-panel\">\n      <SearchBar />\n      <BasicMenu />\n    </div>\n  );\n}\n\nexport default SearchPanel; \n","import './App.css';\nimport Map from './map/Map';\nimport SearchPanel from './search_panel/SearchPanel';\n\nfunction App() {\n\n  const center = {\n    lat: 40.51367862028704,\n    lng: -100.98148879287625\n  }\n\n  return (\n    <>\n      <SearchPanel />\n      <Map center={center} defaultZoom={4} />\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\n\r\ntype Keys = {\r\n    googleMapsAPI: string\r\n}\r\n\r\n\r\n// Define a service using a base URL and expected endpoints\r\nexport const keysApi = createApi({\r\n  reducerPath: 'keysApi',\r\n  baseQuery: fetchBaseQuery({ baseUrl: 'https://puddleglum56.github.io/wemapi/' }),\r\n  endpoints: (builder) => ({\r\n    getKeys: builder.query<Keys, void>({\r\n      query: () => `keys.json`,\r\n    }),\r\n  }),\r\n})\r\n\r\n// Export hooks for usage in functional components, which are\r\n// auto-generated based on the defined endpoints\r\nexport const { useGetKeysQuery } = keysApi","import { configureStore } from \"@reduxjs/toolkit\"\r\nimport searchBarReducer from \"./search_bar/SearchBarSlice\"\r\nimport advancedOptionsReducer from \"./advanced_options_menu/AdvancedOptionsMenuSlice\"\r\nimport mapReducer from \"./map/MapSlice\"\r\nimport { keysApi } from \"./keysApi\"\r\nimport { seasonalJobsSearchApi } from \"./searchApi\"\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n      searchBar: searchBarReducer,\r\n      advancedOptions: advancedOptionsReducer,\r\n      map: mapReducer,\r\n      [keysApi.reducerPath]: keysApi.reducer,\r\n      [seasonalJobsSearchApi.reducerPath]: seasonalJobsSearchApi.reducer,\r\n  },\r\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(keysApi.middleware, seasonalJobsSearchApi.middleware)\r\n})\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}